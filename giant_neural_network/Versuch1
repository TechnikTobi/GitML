from numpy import exp, random, dot

class NeuralNetwork():

    def __init__(self):
    
        random.seed(1)
        self.synaptic_weights = 2 * random.random((2, 1)) - 1

    def __sigmoid(self, x):
        return 1 / (1 + exp(-x))

    def __sigmoid_derivative(self, x):
        return x * (1 - x)
        
    def train(self, training_set_inputs, training_set_outputs, number_of_training_iterations):
        
        for iteration in xrange(number_of_training_iterations):
            
            output = self.think(training_set_inputs)
            error = training_set_outputs - output
            adjustment = dot(training_set_inputs.T, error * self.__sigmoid_derivative(output))
            self.synaptic_weights += adjustment

    def think(self, inputs):
        return self.__sigmoid(dot(inputs, self.synaptic_weights))
       
neuralNet = NeuralNetwork()

print neuralNet.synaptic_weights

training_set_inputs = [
    [3  , 1.5, 1],
    [3  , 1  , 0],
    [4  , 1.5, 1],
    [2  , 1  , 0],
    [3.5, 0.5, 1],
    [2  , 0.5, 0],
    [5.5, 1  , 1],
    [1  , 1  , 0]
    ]
    
training_set_outputs = [[1],[0],[1],[0],[1],[0],[1],[0]]

neuralNet.train(training_set_inputs, training_set_outputs, 1000)

print neuralNet.synaptic_weights

print neuralNet.think([4.5, 1])
